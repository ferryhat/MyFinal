{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\FERIEL\\\\Desktop\\\\CarRent\\\\client\\\\src\\\\components\\\\dashboardComponents\\\\Rentcarreports.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext, useRef } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport frappe from 'frappe-charts';\nimport { AdminContext } from '../../App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Rentcarreports = () => {\n  _s();\n  const {\n    adminState,\n    dispatchadmin\n  } = useContext(AdminContext);\n  const chartContainerRef = useRef(null);\n  const [incomeByDate, setIncomeByDate] = useState({});\n  const getRentCarIncome = async () => {\n    try {\n      const res = await fetch('/getrentcarincome', {\n        method: 'GET'\n      });\n      const data = await res.json();\n      setIncomeByDate(data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    getRentCarIncome();\n  }, []);\n  useEffect(() => {\n    if (Object.keys(incomeByDate).length > 0) {\n      renderChart();\n    }\n  }, [incomeByDate]);\n  const renderChart = () => {\n    const labels = Object.keys(incomeByDate);\n    const totalIncomeData = Object.values(incomeByDate).map(income => income.totalIncome);\n    const soldItemsCountData = Object.values(incomeByDate).map(income => income.count);\n    const chart = new frappe.Chart(chartContainerRef.current, {\n      title: 'Rented Cars Income Report',\n      data: {\n        labels: labels,\n        datasets: [{\n          name: 'Total Income',\n          type: 'bar',\n          color: 'purple',\n          values: totalIncomeData\n        }, {\n          name: 'Sold Items Count',\n          type: 'bar',\n          color: 'blue',\n          values: soldItemsCountData\n        }]\n      },\n      axisOptions: {\n        xAxisMode: 'tick',\n        yAxisMode: 'tick',\n        xIsSeries: true\n      }\n    });\n\n    // Store the chart instance in a state variable or a ref\n    // For example, using a ref:\n    // chartContainerRef.current = chart;\n  };\n\n  // Rest of the component code...\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chart-container\",\n      ref: chartContainerRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(Rentcarreports, \"zklfBT2I2eAysn8m4QKSWlIJfio=\");\n_c = Rentcarreports;\nexport default Rentcarreports;\nvar _c;\n$RefreshReg$(_c, \"Rentcarreports\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useRef","NavLink","frappe","AdminContext","jsxDEV","_jsxDEV","Fragment","_Fragment","Rentcarreports","_s","adminState","dispatchadmin","chartContainerRef","incomeByDate","setIncomeByDate","getRentCarIncome","res","fetch","method","data","json","error","console","log","Object","keys","length","renderChart","labels","totalIncomeData","values","map","income","totalIncome","soldItemsCountData","count","chart","Chart","current","title","datasets","name","type","color","axisOptions","xAxisMode","yAxisMode","xIsSeries","children","id","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/FERIEL/Desktop/CarRent/client/src/components/dashboardComponents/Rentcarreports.js"],"sourcesContent":["import React, { useState, useEffect, useContext, useRef } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport frappe from 'frappe-charts';\r\n\r\nimport { AdminContext } from '../../App';\r\n\r\nconst Rentcarreports = () => {\r\n    const { adminState, dispatchadmin } = useContext(AdminContext);\r\n    const chartContainerRef = useRef(null);\r\n    const [incomeByDate, setIncomeByDate] = useState({});\r\n\r\n    const getRentCarIncome = async () => {\r\n        try {\r\n            const res = await fetch('/getrentcarincome', {\r\n                method: 'GET'\r\n            });\r\n\r\n            const data = await res.json();\r\n\r\n            setIncomeByDate(data);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getRentCarIncome();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (Object.keys(incomeByDate).length > 0) {\r\n            renderChart();\r\n        }\r\n    }, [incomeByDate]);\r\n\r\n    const renderChart = () => {\r\n        const labels = Object.keys(incomeByDate);\r\n        const totalIncomeData = Object.values(incomeByDate).map(income => income.totalIncome);\r\n        const soldItemsCountData = Object.values(incomeByDate).map(income => income.count);\r\n\r\n        const chart = new frappe.Chart(chartContainerRef.current, {\r\n            title: 'Rented Cars Income Report',\r\n            data: {\r\n                labels: labels,\r\n                datasets: [\r\n                    {\r\n                        name: 'Total Income',\r\n                        type: 'bar',\r\n                        color: 'purple',\r\n                        values: totalIncomeData\r\n                    },\r\n                    {\r\n                        name: 'Sold Items Count',\r\n                        type: 'bar',\r\n                        color: 'blue',\r\n                        values: soldItemsCountData\r\n                    }\r\n                ]\r\n            },\r\n            axisOptions: {\r\n                xAxisMode: 'tick',\r\n                yAxisMode: 'tick',\r\n                xIsSeries: true\r\n            }\r\n        });\r\n\r\n        // Store the chart instance in a state variable or a ref\r\n        // For example, using a ref:\r\n        // chartContainerRef.current = chart;\r\n    };\r\n\r\n    // Rest of the component code...\r\n\r\n    return (\r\n        <>\r\n            {/* Rest of the component JSX */}\r\n            <div id=\"chart-container\" ref={chartContainerRef}></div>\r\n            {/* Rest of the component JSX */}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Rentcarreports;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}